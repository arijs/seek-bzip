#!/usr/bin/env node

var program = require('commander');
var Bunzip = require('../');
var fs = require('fs');

program
    .version(Bunzip.version)
    .usage('-d|-z [infile] [outfile]')
    .option('-d, --decompress',
	    'Decompress stdin to stdout')
    //.option('-z, --compress',
    //      'Compress stdin to stdout')
    .option('-b, --block <n>',
	    'Extract a single block, starting at <n> bits.', undefined)
    .option('-m, --multistream',
	    'Read a multistream bzip2 file');
program.on('--help', function() {
    console.log('  If <infile> is omitted, reads from stdin.');
    console.log('  If <outfile> is omitted, writes to stdout.');
});
program.parse(process.argv);

if (!program.compress) { program.decompress = true; }

if (program.compress && program.block !== undefined) {
    console.error('--block can only be used with decompression');
    return 1;
}

if (program.decompress && program.compress) {
    console.error('Must specify either -d or -z.');
    return 1;
}

var in_fd = 0, close_in = function(){};
var out_fd = 1, close_out = function(){};
if (program.args.length > 0) {
    in_fd = fs.openSync(program.args.shift(), 'r');
    close_in = function() { fs.closeSync(in_fd); };
}
if (program.args.length > 0) {
    out_fd = fs.openSync(program.args.shift(), 'w');
    close_out = function() { fs.closeSync(out_fd); };
}

var inStream = Bunzip.fdReadStream(in_fd);
var outStream = Bunzip.fdWriteStream(out_fd);

if (program.decompress) {
    try {
        if (program.block !== undefined) {
	    Bunzip.decodeBlock(inStream, +program.block, outStream);
        } else {
	    Bunzip.decode(inStream, outStream, program.multistream);
        }
        outStream.flush();
    } catch (e) {
        if (e.code !== 'EPIPE') throw e;
    }
    close_in();
    close_out();
    return 0;
}
if (program.compress) {
    console.error('Compression not yet implemented.');
    return 1;
}
return 1;
